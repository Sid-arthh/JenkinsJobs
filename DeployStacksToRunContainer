pipeline {
    agent any
    
    environment {
        AWS_REGION = "us-east-1"
        ECR_REPO_NAME = "springapp4"
        GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'credential-ssh', url: 'git@github.com:k-Richie/SpringCI.git'
            }
        }
        
        stage('Create or Update EcrStack') {
            steps {
                script {
                    def stackExists = true
                    // Check if the stack already exists
                    try {
                        sh 'aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region ${AWS_REGION}'
                    } catch (Exception) {
                        // Stack does not exist
                        stackExists = false
                    }

                    if (!stackExists) {
                        // Stack exists, perform an update
                        sh "aws ecr create-repository --repository-name ${ECR_REPO_NAME} --region ${AWS_REGION}"
                    } 
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('app'){
                    sh "mvn clean package"
                }
            }
        }
        stage('Building Image') {
            steps {
                dir('app'){
                    sh 'docker build -t $ECR_REPO_NAME .'
                }
            }
        }
        stage('Push') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    dir('app'){
                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 864543196770.dkr.ecr.us-east-1.amazonaws.com"
                        sh 'docker tag $ECR_REPO_NAME 864543196770.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_NAME:${GIT_COMMIT}'
                        sh 'docker push 864543196770.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_NAME:${GIT_COMMIT}'
                    }
                }
            }
        }
        stage('Update ecs ParameterFile'){
            steps{
                dir('parameters'){
                sh 'sed -i "s#\\"ParameterValue\\": \\"url\\"#\\"ParameterValue\\": \\"864543196770.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_NAME:${GIT_COMMIT}\\"#" ecs-services.json'
                }
            }
        }
        
        stage('Create or Update Stack') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    dir('template'){
                    script {
                        def vpcStackName = 'vpc'
                        def rdsStackName = 'rds'
                        def ecsClusterStackName = 'ecs-cluster'
                        def ecsASGStackName = 'ecs-asg'
                        def ecsServiceStackName = 'ecs-services'
                        // def action = params.CreateOrUpdate
                        // PARAMETERS_FILE="../parameters/ecs-services.json"
                        // PARAMS=($$(jq -r '.[] | [.ParameterKey, .ParameterValue] | "'\''\(.[0])=\(.[1])'\''"' $PARAMETERS_FILE))

                        sh "aws cloudformation deploy --template-file ${vpcStackName}.yml --stack-name ${vpcStackName} --parameter-overrides file://../parameters/${vpcStackName}.json --region us-east-1 --capabilities CAPABILITY_IAM"
                        sh "aws cloudformation wait stack-create-complete --stack-name ${vpcStackName} --region us-east-1"
                        sh "aws cloudformation deploy --template-file ${rdsStackName}.yml --stack-name ${rdsStackName} --parameter-overrides  file://../parameters/${rdsStackName}.json --region us-east-1 --capabilities CAPABILITY_IAM"
                        sh "aws cloudformation wait stack-create-complete --stack-name ${rdsStackName} --region us-east-1"
                        sh "aws cloudformation deploy --template-file ${ecsClusterStackName}.yml --stack-name ${ecsClusterStackName} --parameter-overrides  file://../parameters/${ecsClusterStackName}.json --region us-east-1 --capabilities CAPABILITY_IAM"
                        sh "aws cloudformation wait stack-create-complete --stack-name ${ecsClusterStackName} --region us-east-1"
                        sh "aws cloudformation deploy --template-file ${ecsASGStackName}.yml --stack-name ${ecsASGStackName} --parameter-overrides  file://../parameters/${ecsASGStackName}.json --region us-east-1 --capabilities CAPABILITY_NAMED_IAM"
                        sh "aws cloudformation wait stack-create-complete --stack-name ${ecsASGStackName} --region us-east-1"
                        sh "aws cloudformation deploy --template-file ${ecsServiceStackName}.yml --stack-name ${ecsServiceStackName} --parameter-overrides file://../parameters/${ecsServiceStackName}.json --region us-east-1 --capabilities CAPABILITY_NAMED_IAM"
                        // sh "aws cloudformation deploy --template-file vpc.yaml --stack-name vpc-stack --parameter-overrides ${PARAMS[@]} --capabilities CAPABILITY_IAM --region your-region"
                        sh "aws cloudformation wait stack-create-complete --stack-name ${ecsServiceStackName} --region us-east-1"
                    }
                  }
                }
            }
        }
    }
}
