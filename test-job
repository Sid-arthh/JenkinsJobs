def appNames = ["harnessweb", "harvey-integration", "judgesAssistant", "stewards-portal", "webapi"]
def EnvironmentName = "dev"
def size

def time
if (params.start_time) {
    time = params.start_time
    size = 1
} else if (params.stop_time) {
    size = 0
    time = params.stop_time
} else {
    error('Either start_time or stop_time must be defined.')
}

pipeline {
  agent any
  triggers {
    cron("${time}") 
  }
  stages {
    stage('LOOP') {
      steps {
        script {
          appNames.each { appName ->
            def constructedString = "rise-${appName}-${EnvironmentName}-ASG"

            try {
              sh """aws autoscaling update-auto-scaling-group \
                --auto-scaling-group-name 'rise-${appName}-${EnvironmentName}-ASG' \
                --min-size $size \
                --max-size $size \
                --desired-capacity $size
              """
            } catch (Exception e) {
              currentBuild.result = 'SUCCESS' // Set the result to SUCCESS even if the sh command fails
              echo "Exception occurred: ${e.message}"
            }
          }
        }
      }
    }
  }
}
