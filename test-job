def appNames = ["harnessweb", "harvey-integration", "judgesAssistant", "stewards-portal", "webapi"]
def EnvironmentName = "dev"
def size
def timer
def time
def cronExpression

if (params.start_time) {
    time = params.start_time
    size = 1
    timer = "at 2 minutes"
    cronExpression = "2 * * * *" // Sunday at midnight
} else if (params.stop_time) {
    size = 0
    time = params.stop_time
    timer = "at 5 minutes"
    cronExpression = "5 * * * *" // Saturday at midnight
} else {
    error('Either start_time or stop_time must be defined.')
}

pipeline {
  agent any
  triggers {
        cron(name: "Custom Cron Trigger", spec: "${time} ${cronExpression}")
    }

  stages {
    stage('LOOP') {
      steps {
        script {
          echo timer
          appNames.each { appName ->
            def constructedString = "rise-${appName}-${EnvironmentName}-ASG"

            try {
              sh """aws autoscaling update-auto-scaling-group \
                --auto-scaling-group-name 'rise-${appName}-${EnvironmentName}-ASG' \
                --min-size $size \
                --max-size $size \
                --desired-capacity $size
              """
              // Check the exit status of the AWS CLI command
              def exitStatus = sh(script: 'echo $?', returnStatus: true)
              if (exitStatus == 0) {
                echo "AWS CLI command executed successfully."
              } else {
                echo "AWS CLI command failed. Exit status: ${exitStatus}"
                currentBuild.result = 'FAILURE' // Set the build result to FAILURE
              }
            } catch (Exception e) {
              currentBuild.result = 'FAILURE' // Set the build result to FAILURE
              echo "Exception occurred: ${e.message}"
            }
          }
        }
      }
    }
  }
}
